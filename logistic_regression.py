# -*- coding: utf-8 -*-
"""logistic regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VbiYBYe-J695acfue8LhLeB9M7G_W8d8
"""



from google.colab import drive
drive.mount('/content/drive')

!pip install pandas --quiet

import pandas as pd

raw_df = pd.read_csv('/content/drive/MyDrive/Meet Recordings/iphone_purchase_records (1) - iphone_purchase_records (1).csv')

raw_df

raw_df.describe()

raw_df.info()

# Commented out IPython magic to ensure Python compatibility.
import plotly.express as px
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

px.histogram(raw_df, x='Gender', title='Gender vs purchase', color='Purchase')

raw_df.corr()

!pip install scikit-learn --upgrade --quiet

from sklearn.model_selection import train_test_split

train_val_df, test_df = train_test_split(raw_df, test_size=0.2, random_state=42)
train_df, val_df = train_test_split(train_val_df, test_size=0.25, random_state=42)

print('train_df.shape :', train_df.shape)
print('val_df.shape :', val_df.shape)
print('test_df.shape :', test_df.shape)

input_cols = list(train_df.columns)[0:]
target_col = 'Purchase'

train_inputs = train_df[input_cols].copy()
train_targets = train_df[target_col].copy()

val_inputs = val_df[input_cols].copy()
val_targets = val_df[target_col].copy()

test_inputs = test_df[input_cols].copy()
test_targets = test_df[target_col].copy()

!pip install numpy --quiet

import numpy as np

numeric_cols = train_inputs.select_dtypes(include=np.number).columns.tolist()[:-1]
categorical_cols = train_inputs.select_dtypes('object').columns.tolist()

from sklearn.preprocessing import MinMaxScaler

MinMaxScaler?

scaler = MinMaxScaler()

scaler.fit(raw_df[numeric_cols])

train_inputs[numeric_cols] = scaler.transform(train_inputs[numeric_cols])
val_inputs[numeric_cols] = scaler.transform(val_inputs[numeric_cols])
test_inputs[numeric_cols] = scaler.transform(test_inputs[numeric_cols])

train_inputs[numeric_cols]

raw_df[categorical_cols].nunique()

from sklearn.preprocessing import OneHotEncoder

encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')

encoder.fit(raw_df[categorical_cols])

encoded_cols = list(encoder.get_feature_names(categorical_cols))
print(encoded_cols)

train_inputs[encoded_cols] = encoder.transform(train_inputs[categorical_cols])
val_inputs[encoded_cols] = encoder.transform(val_inputs[categorical_cols])
test_inputs[encoded_cols] = encoder.transform(test_inputs[categorical_cols])

train_inputs

print('train_inputs:', train_inputs.shape)
print('train_targets:', train_targets.shape)
print('val_inputs:', val_inputs.shape)
print('val_targets:', val_targets.shape)
print('test_inputs:', test_inputs.shape)
print('test_targets:', test_targets.shape)

!pip install pyarrow --quiet

train_inputs.to_parquet('train_inputs.parquet')
val_inputs.to_parquet('val_inputs.parquet')
test_inputs.to_parquet('test_inputs.parquet')

# Commented out IPython magic to ensure Python compatibility.
# %%time
# pd.DataFrame(train_targets).to_parquet('train_targets.parquet')
# pd.DataFrame(val_targets).to_parquet('val_targets.parquet')
# pd.DataFrame(test_targets).to_parquet('test_targets.parquet')

train_inputs[encoded_cols]

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(train_inputs[numeric_cols + encoded_cols], train_targets)

X_train = train_inputs[numeric_cols + encoded_cols]
X_val = val_inputs[numeric_cols + encoded_cols]
X_test = test_inputs[numeric_cols + encoded_cols]

train_preds = model.predict(X_train)

train_preds

train_targets

from sklearn.metrics import accuracy_score

accuracy_score(train_targets, train_preds)